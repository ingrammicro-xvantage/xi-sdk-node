"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _MultiSKUPriceAndStockRequest = _interopRequireDefault(require("../model/MultiSKUPriceAndStockRequest"));
var _MultiSKUPriceAndStockResponse = _interopRequireDefault(require("../model/MultiSKUPriceAndStockResponse"));
var _ProductSearchRequest = _interopRequireDefault(require("../model/ProductSearchRequest"));
var _ProductSearchResponse = _interopRequireDefault(require("../model/ProductSearchResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * XI Sdk Resellers
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* ProductCatalogV4 service.
* @module api/ProductCatalogV4Api
* @version 1.0.0
*/
var ProductCatalogV4Api = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new ProductCatalogV4Api. 
  * @alias module:api/ProductCatalogV4Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ProductCatalogV4Api(apiClient) {
    _classCallCheck(this, ProductCatalogV4Api);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the postV4Multiskupriceandstock operation.
   * @callback module:api/ProductCatalogV4Api~postV4MultiskupriceandstockCallback
   * @param {String} error Error message, if any.
   * @param {module:model/MultiSKUPriceAndStockResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Product availability for upto 50 SKUs
   * Find price and availability of up to 50 SKUs in a single request. As you increase the number of items in the request response time will be extended. This transaction must not be used as a continuous cyclical call to populate availability and pricing for your full catalog. Customers that perform this activity will lose access to price and availability.  Ingram can provide a Price catalog file and an Inventory file in flat file format, which can be obtained through FTP download. Please contact 1800-616-4665 or Electronic.Services@ingrammicro.com for more information on these files.
   * @param {Object} opts Optional parameters
   * @param {module:model/MultiSKUPriceAndStockRequest} [multiSKUPriceAndStockRequest] 
   * @param {module:api/ProductCatalogV4Api~postV4MultiskupriceandstockCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/MultiSKUPriceAndStockResponse}
   */
  _createClass(ProductCatalogV4Api, [{
    key: "postV4Multiskupriceandstock",
    value: function postV4Multiskupriceandstock(opts, callback) {
      opts = opts || {};
      var postBody = opts['multiSKUPriceAndStockRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['application'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MultiSKUPriceAndStockResponse["default"];
      return this.apiClient.callApi('/products/v4/multiskupriceandstock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the postV4Productsearch operation.
     * @callback module:api/ProductCatalogV4Api~postV4ProductsearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Real-time Product Search
     * A real time search that provides the Ingram Micro part number using the manufacturer part number.  This API is helpful to eliminate any errors when a manufactuer has the same part number and Ingram Micro has had to create multiple sku numbers 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductSearchRequest} [productSearchRequest] 
     * @param {module:api/ProductCatalogV4Api~postV4ProductsearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductSearchResponse}
     */
  }, {
    key: "postV4Productsearch",
    value: function postV4Productsearch(opts, callback) {
      opts = opts || {};
      var postBody = opts['productSearchRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['application'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ProductSearchResponse["default"];
      return this.apiClient.callApi('/products/v4/productsearch', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return ProductCatalogV4Api;
}();