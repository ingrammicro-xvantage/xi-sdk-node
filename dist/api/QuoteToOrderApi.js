"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _GetResellerV6ValidateQuote500Response = _interopRequireDefault(require("../model/GetResellerV6ValidateQuote500Response"));
var _PostQuoteToOrderV6400Response = _interopRequireDefault(require("../model/PostQuoteToOrderV6400Response"));
var _QuoteToOrderDetailsDTO = _interopRequireDefault(require("../model/QuoteToOrderDetailsDTO"));
var _QuoteToOrderResponse = _interopRequireDefault(require("../model/QuoteToOrderResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * XI Sdk Resellers
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* QuoteToOrder service.
* @module api/QuoteToOrderApi
* @version 1.0.0
*/
var QuoteToOrderApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new QuoteToOrderApi. 
  * @alias module:api/QuoteToOrderApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function QuoteToOrderApi(apiClient) {
    _classCallCheck(this, QuoteToOrderApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the postQuoteToOrderV6 operation.
   * @callback module:api/QuoteToOrderApi~postQuoteToOrderV6Callback
   * @param {String} error Error message, if any.
   * @param {module:model/QuoteToOrderResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Quote To Order
   * The “Quote to Order” (QTO) endpoint allows a customer to create an order using the existing quote which is in “Ready to Order” status. A customer can create an order using Configure to order (CTO) quote or a non-configure to order (Non-CTO) quote. Upon successful submission of the order create request, a confirmation message will be returned as an API response. <br > <br >Ingram Micro offers webhooks as a method to send notifications to Resellers once the order creation request is received. All the updates related to Order creation will be pushed as a notification to the customer via a pre-defined callback URL as an HTTP post. <br > <br > **Prerequisite:** Pre-defined callback URL <br > <br > Before creating an order using the quote, it’s recommended to validate the quote using the “Validate Quote” endpoint. Validate Quote endpoint will not only validate the quote but also outline all the mandatory fields required by the vendor at a header level and at the line level which a customer need to pass to the Quote To Order endpoint request.  For a detailed understanding of the “Validate Quote” endpoint, review the “Validate Quote” endpoint documentation. <br ><br > **How it works:** <br ><br > - The customer validates the quote with a quote number from Validate Quote endpoint. <br > - The customer copies all the mandatory fields required by the vendor and adds them to the QTO request body. <br > - The customer provides all the values for Vendor mandatory fields along with other required information for QTO to create an order. <br > - After the order creation request receipt acknowledgment from the QTO endpoint, all further order creation updates will be provided via webhook push notification.
   * @param {String} iMCustomerNumber Your unique Ingram Micro customer number.
   * @param {String} iMCountryCode Two-character ISO country code.
   * @param {String} iMCorrelationID Unique transaction number to identify each transaction accross all the systems.
   * @param {module:model/QuoteToOrderDetailsDTO} quoteToOrderDetailsDTO 
   * @param {Object} opts Optional parameters
   * @param {String} [iMSenderID] Unique value used to identify the sender of the transaction.
   * @param {module:api/QuoteToOrderApi~postQuoteToOrderV6Callback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/QuoteToOrderResponse}
   */
  _createClass(QuoteToOrderApi, [{
    key: "postQuoteToOrderV6",
    value: function postQuoteToOrderV6(iMCustomerNumber, iMCountryCode, iMCorrelationID, quoteToOrderDetailsDTO, opts, callback) {
      opts = opts || {};
      var postBody = quoteToOrderDetailsDTO;
      // verify the required parameter 'iMCustomerNumber' is set
      if (iMCustomerNumber === undefined || iMCustomerNumber === null) {
        throw new Error("Missing the required parameter 'iMCustomerNumber' when calling postQuoteToOrderV6");
      }
      // verify the required parameter 'iMCountryCode' is set
      if (iMCountryCode === undefined || iMCountryCode === null) {
        throw new Error("Missing the required parameter 'iMCountryCode' when calling postQuoteToOrderV6");
      }
      // verify the required parameter 'iMCorrelationID' is set
      if (iMCorrelationID === undefined || iMCorrelationID === null) {
        throw new Error("Missing the required parameter 'iMCorrelationID' when calling postQuoteToOrderV6");
      }
      // verify the required parameter 'quoteToOrderDetailsDTO' is set
      if (quoteToOrderDetailsDTO === undefined || quoteToOrderDetailsDTO === null) {
        throw new Error("Missing the required parameter 'quoteToOrderDetailsDTO' when calling postQuoteToOrderV6");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'IM-CustomerNumber': iMCustomerNumber,
        'IM-CountryCode': iMCountryCode,
        'IM-SenderID': opts['iMSenderID'],
        'IM-CorrelationID': iMCorrelationID
      };
      var formParams = {};
      var authNames = ['application'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _QuoteToOrderResponse["default"];
      return this.apiClient.callApi('/resellers/v6/q2o/orders', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return QuoteToOrderApi;
}();