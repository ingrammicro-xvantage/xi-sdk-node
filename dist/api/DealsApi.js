"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _DealsDetailsResponse = _interopRequireDefault(require("../model/DealsDetailsResponse"));
var _DealsSearchResponse = _interopRequireDefault(require("../model/DealsSearchResponse"));
var _GetResellerV6ValidateQuote500Response = _interopRequireDefault(require("../model/GetResellerV6ValidateQuote500Response"));
var _PostRenewalssearch400Response = _interopRequireDefault(require("../model/PostRenewalssearch400Response"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * XI Sdk Resellers
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Deals service.
* @module api/DealsApi
* @version 1.0.0
*/
var DealsApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DealsApi. 
  * @alias module:api/DealsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DealsApi(apiClient) {
    _classCallCheck(this, DealsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the getResellersV6Dealsdetails operation.
   * @callback module:api/DealsApi~getResellersV6DealsdetailsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DealsDetailsResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deals Details
   * The Deals Details API will retrieve all the details related to the specific deal id.
   * @param {String} iMCustomerNumber Your unique Ingram Micro customer number.
   * @param {String} iMCountryCode Two-character ISO country code.
   * @param {String} iMCorrelationID Unique transaction number to identify each transaction across all the systems.
   * @param {String} iMApplicationId Unique value used to identify the sender of the transaction. Example: MyCompany
   * @param {String} iMEnvironment Environment name.
   * @param {String} dealId Unique deal ID.
   * @param {module:api/DealsApi~getResellersV6DealsdetailsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DealsDetailsResponse}
   */
  _createClass(DealsApi, [{
    key: "getResellersV6Dealsdetails",
    value: function getResellersV6Dealsdetails(iMCustomerNumber, iMCountryCode, iMCorrelationID, iMApplicationId, iMEnvironment, dealId, callback) {
      var postBody = null;
      // verify the required parameter 'iMCustomerNumber' is set
      if (iMCustomerNumber === undefined || iMCustomerNumber === null) {
        throw new Error("Missing the required parameter 'iMCustomerNumber' when calling getResellersV6Dealsdetails");
      }
      // verify the required parameter 'iMCountryCode' is set
      if (iMCountryCode === undefined || iMCountryCode === null) {
        throw new Error("Missing the required parameter 'iMCountryCode' when calling getResellersV6Dealsdetails");
      }
      // verify the required parameter 'iMCorrelationID' is set
      if (iMCorrelationID === undefined || iMCorrelationID === null) {
        throw new Error("Missing the required parameter 'iMCorrelationID' when calling getResellersV6Dealsdetails");
      }
      // verify the required parameter 'iMApplicationId' is set
      if (iMApplicationId === undefined || iMApplicationId === null) {
        throw new Error("Missing the required parameter 'iMApplicationId' when calling getResellersV6Dealsdetails");
      }
      // verify the required parameter 'iMEnvironment' is set
      if (iMEnvironment === undefined || iMEnvironment === null) {
        throw new Error("Missing the required parameter 'iMEnvironment' when calling getResellersV6Dealsdetails");
      }
      // verify the required parameter 'dealId' is set
      if (dealId === undefined || dealId === null) {
        throw new Error("Missing the required parameter 'dealId' when calling getResellersV6Dealsdetails");
      }
      var pathParams = {
        'dealId': dealId
      };
      var queryParams = {};
      var headerParams = {
        'IM-CustomerNumber': iMCustomerNumber,
        'IM-CountryCode': iMCountryCode,
        'IM-CorrelationID': iMCorrelationID,
        'IM-ApplicationId': iMApplicationId,
        'IM-Environment': iMEnvironment
      };
      var formParams = {};
      var authNames = ['application'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DealsDetailsResponse["default"];
      return this.apiClient.callApi('/resellers/v6/deals/{dealId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getResellersV6Dealssearch operation.
     * @callback module:api/DealsApi~getResellersV6DealssearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealsSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deals Search
     * The Deals Search API, by default, will retrieve all the deals that are associated with the customerâ€™s account. The customer will be able to search deals using the End-user name, Vendor name, or DealID. 
     * @param {String} iMCustomerNumber Your unique Ingram Micro customer number.
     * @param {String} iMCountryCode Two-character ISO country code.
     * @param {String} iMCorrelationID Unique transaction number to identify each transaction across all the systems.
     * @param {Object} opts Optional parameters
     * @param {String} [iMSenderID] Unique value used to identify the sender of the transaction. Example: MyCompany
     * @param {String} [endUser] The end user/customer's name.
     * @param {String} [vendor] The vendor's name.
     * @param {String} [dealId] Deal/Special bid number.
     * @param {module:api/DealsApi~getResellersV6DealssearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealsSearchResponse}
     */
  }, {
    key: "getResellersV6Dealssearch",
    value: function getResellersV6Dealssearch(iMCustomerNumber, iMCountryCode, iMCorrelationID, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'iMCustomerNumber' is set
      if (iMCustomerNumber === undefined || iMCustomerNumber === null) {
        throw new Error("Missing the required parameter 'iMCustomerNumber' when calling getResellersV6Dealssearch");
      }
      // verify the required parameter 'iMCountryCode' is set
      if (iMCountryCode === undefined || iMCountryCode === null) {
        throw new Error("Missing the required parameter 'iMCountryCode' when calling getResellersV6Dealssearch");
      }
      // verify the required parameter 'iMCorrelationID' is set
      if (iMCorrelationID === undefined || iMCorrelationID === null) {
        throw new Error("Missing the required parameter 'iMCorrelationID' when calling getResellersV6Dealssearch");
      }
      var pathParams = {};
      var queryParams = {
        'endUser': opts['endUser'],
        'vendor': opts['vendor'],
        'dealId': opts['dealId']
      };
      var headerParams = {
        'IM-CustomerNumber': iMCustomerNumber,
        'IM-CountryCode': iMCountryCode,
        'IM-CorrelationID': iMCorrelationID,
        'IM-SenderID': opts['iMSenderID']
      };
      var formParams = {};
      var authNames = ['application'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DealsSearchResponse["default"];
      return this.apiClient.callApi('/resellers/v6/deals/search', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return DealsApi;
}();