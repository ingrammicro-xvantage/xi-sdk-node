/**
 * XI Sdk Resellers
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductSearchResponseCatalogInnerLinksInner from './ProductSearchResponseCatalogInnerLinksInner';

/**
 * The ProductSearchResponseCatalogInner model module.
 * @module model/ProductSearchResponseCatalogInner
 * @version 1.0.0
 */
class ProductSearchResponseCatalogInner {
    /**
     * Constructs a new <code>ProductSearchResponseCatalogInner</code>.
     * @alias module:model/ProductSearchResponseCatalogInner
     */
    constructor() { 
        
        ProductSearchResponseCatalogInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductSearchResponseCatalogInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductSearchResponseCatalogInner} obj Optional instance to populate.
     * @return {module:model/ProductSearchResponseCatalogInner} The populated <code>ProductSearchResponseCatalogInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductSearchResponseCatalogInner();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('subCategory')) {
                obj['subCategory'] = ApiClient.convertToType(data['subCategory'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('ingramPartNumber')) {
                obj['ingramPartNumber'] = ApiClient.convertToType(data['ingramPartNumber'], 'String');
            }
            if (data.hasOwnProperty('vendorPartNumber')) {
                obj['vendorPartNumber'] = ApiClient.convertToType(data['vendorPartNumber'], 'String');
            }
            if (data.hasOwnProperty('upcCode')) {
                obj['upcCode'] = ApiClient.convertToType(data['upcCode'], 'String');
            }
            if (data.hasOwnProperty('vendorName')) {
                obj['vendorName'] = ApiClient.convertToType(data['vendorName'], 'String');
            }
            if (data.hasOwnProperty('endUserRequired')) {
                obj['endUserRequired'] = ApiClient.convertToType(data['endUserRequired'], 'String');
            }
            if (data.hasOwnProperty('hasDiscounts')) {
                obj['hasDiscounts'] = ApiClient.convertToType(data['hasDiscounts'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('discontinued')) {
                obj['discontinued'] = ApiClient.convertToType(data['discontinued'], 'String');
            }
            if (data.hasOwnProperty('newProduct')) {
                obj['newProduct'] = ApiClient.convertToType(data['newProduct'], 'String');
            }
            if (data.hasOwnProperty('directShip')) {
                obj['directShip'] = ApiClient.convertToType(data['directShip'], 'String');
            }
            if (data.hasOwnProperty('hasWarranty')) {
                obj['hasWarranty'] = ApiClient.convertToType(data['hasWarranty'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [ProductSearchResponseCatalogInnerLinksInner]);
            }
            if (data.hasOwnProperty('extraDescription')) {
                obj['extraDescription'] = ApiClient.convertToType(data['extraDescription'], 'String');
            }
            if (data.hasOwnProperty('replacementSku')) {
                obj['replacementSku'] = ApiClient.convertToType(data['replacementSku'], 'String');
            }
            if (data.hasOwnProperty('authorizedToPurchase')) {
                obj['authorizedToPurchase'] = ApiClient.convertToType(data['authorizedToPurchase'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductSearchResponseCatalogInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductSearchResponseCatalogInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['subCategory'] && !(typeof data['subCategory'] === 'string' || data['subCategory'] instanceof String)) {
            throw new Error("Expected the field `subCategory` to be a primitive type in the JSON string but got " + data['subCategory']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is a string
        if (data['ingramPartNumber'] && !(typeof data['ingramPartNumber'] === 'string' || data['ingramPartNumber'] instanceof String)) {
            throw new Error("Expected the field `ingramPartNumber` to be a primitive type in the JSON string but got " + data['ingramPartNumber']);
        }
        // ensure the json data is a string
        if (data['vendorPartNumber'] && !(typeof data['vendorPartNumber'] === 'string' || data['vendorPartNumber'] instanceof String)) {
            throw new Error("Expected the field `vendorPartNumber` to be a primitive type in the JSON string but got " + data['vendorPartNumber']);
        }
        // ensure the json data is a string
        if (data['upcCode'] && !(typeof data['upcCode'] === 'string' || data['upcCode'] instanceof String)) {
            throw new Error("Expected the field `upcCode` to be a primitive type in the JSON string but got " + data['upcCode']);
        }
        // ensure the json data is a string
        if (data['vendorName'] && !(typeof data['vendorName'] === 'string' || data['vendorName'] instanceof String)) {
            throw new Error("Expected the field `vendorName` to be a primitive type in the JSON string but got " + data['vendorName']);
        }
        // ensure the json data is a string
        if (data['endUserRequired'] && !(typeof data['endUserRequired'] === 'string' || data['endUserRequired'] instanceof String)) {
            throw new Error("Expected the field `endUserRequired` to be a primitive type in the JSON string but got " + data['endUserRequired']);
        }
        // ensure the json data is a string
        if (data['hasDiscounts'] && !(typeof data['hasDiscounts'] === 'string' || data['hasDiscounts'] instanceof String)) {
            throw new Error("Expected the field `hasDiscounts` to be a primitive type in the JSON string but got " + data['hasDiscounts']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['discontinued'] && !(typeof data['discontinued'] === 'string' || data['discontinued'] instanceof String)) {
            throw new Error("Expected the field `discontinued` to be a primitive type in the JSON string but got " + data['discontinued']);
        }
        // ensure the json data is a string
        if (data['newProduct'] && !(typeof data['newProduct'] === 'string' || data['newProduct'] instanceof String)) {
            throw new Error("Expected the field `newProduct` to be a primitive type in the JSON string but got " + data['newProduct']);
        }
        // ensure the json data is a string
        if (data['directShip'] && !(typeof data['directShip'] === 'string' || data['directShip'] instanceof String)) {
            throw new Error("Expected the field `directShip` to be a primitive type in the JSON string but got " + data['directShip']);
        }
        // ensure the json data is a string
        if (data['hasWarranty'] && !(typeof data['hasWarranty'] === 'string' || data['hasWarranty'] instanceof String)) {
            throw new Error("Expected the field `hasWarranty` to be a primitive type in the JSON string but got " + data['hasWarranty']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                ProductSearchResponseCatalogInnerLinksInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['extraDescription'] && !(typeof data['extraDescription'] === 'string' || data['extraDescription'] instanceof String)) {
            throw new Error("Expected the field `extraDescription` to be a primitive type in the JSON string but got " + data['extraDescription']);
        }
        // ensure the json data is a string
        if (data['replacementSku'] && !(typeof data['replacementSku'] === 'string' || data['replacementSku'] instanceof String)) {
            throw new Error("Expected the field `replacementSku` to be a primitive type in the JSON string but got " + data['replacementSku']);
        }
        // ensure the json data is a string
        if (data['authorizedToPurchase'] && !(typeof data['authorizedToPurchase'] === 'string' || data['authorizedToPurchase'] instanceof String)) {
            throw new Error("Expected the field `authorizedToPurchase` to be a primitive type in the JSON string but got " + data['authorizedToPurchase']);
        }

        return true;
    }


}



/**
 * The description of the product.
 * @member {String} description
 */
ProductSearchResponseCatalogInner.prototype['description'] = undefined;

/**
 * The category of the product. Example: Displays.
 * @member {String} category
 */
ProductSearchResponseCatalogInner.prototype['category'] = undefined;

/**
 * The sub category for the product. Example: ComputernMonitors.
 * @member {String} subCategory
 */
ProductSearchResponseCatalogInner.prototype['subCategory'] = undefined;

/**
 * The product type of the product. Example: LCD Monitors.
 * @member {String} productType
 */
ProductSearchResponseCatalogInner.prototype['productType'] = undefined;

/**
 * The Unique IngramMicro part number for the product.
 * @member {String} ingramPartNumber
 */
ProductSearchResponseCatalogInner.prototype['ingramPartNumber'] = undefined;

/**
 * The vendor part number for the product.
 * @member {String} vendorPartNumber
 */
ProductSearchResponseCatalogInner.prototype['vendorPartNumber'] = undefined;

/**
 * The UPC code for the product. Consists of 12 numeric digits that are uniquly assigned to each trade item.
 * @member {String} upcCode
 */
ProductSearchResponseCatalogInner.prototype['upcCode'] = undefined;

/**
 * The name of the vendor/manufacturer of the product.
 * @member {String} vendorName
 */
ProductSearchResponseCatalogInner.prototype['vendorName'] = undefined;

/**
 * Indicates whether the contact information for the end user/customer is required, which determines pricing and discounts.
 * @member {String} endUserRequired
 */
ProductSearchResponseCatalogInner.prototype['endUserRequired'] = undefined;

/**
 * Specifies if there are discounts available for the product.
 * @member {String} hasDiscounts
 */
ProductSearchResponseCatalogInner.prototype['hasDiscounts'] = undefined;

/**
 * The SKU type of product. One of Physical, Digital, or Any.
 * @member {String} type
 */
ProductSearchResponseCatalogInner.prototype['type'] = undefined;

/**
 * Indicates if the product has been discontinued.
 * @member {String} discontinued
 */
ProductSearchResponseCatalogInner.prototype['discontinued'] = undefined;

/**
 * Indicates if the product is new. For digital products, newer than 10 days. For physical products, newer than 150 days.
 * @member {String} newProduct
 */
ProductSearchResponseCatalogInner.prototype['newProduct'] = undefined;

/**
 * Indicates if the product will be shipped directly to the reseller or end user from the vendor/manufacturer.
 * @member {String} directShip
 */
ProductSearchResponseCatalogInner.prototype['directShip'] = undefined;

/**
 * Indicates if the product has a warranty.
 * @member {String} hasWarranty
 */
ProductSearchResponseCatalogInner.prototype['hasWarranty'] = undefined;

/**
 * @member {Array.<module:model/ProductSearchResponseCatalogInnerLinksInner>} links
 */
ProductSearchResponseCatalogInner.prototype['links'] = undefined;

/**
 * The extended description of the product.
 * @member {String} extraDescription
 */
ProductSearchResponseCatalogInner.prototype['extraDescription'] = undefined;

/**
 * Identifies a SKU that is a comparable subsititution of the current SKU if available.
 * @member {String} replacementSku
 */
ProductSearchResponseCatalogInner.prototype['replacementSku'] = undefined;

/**
 * It is true when it exists in matched queries field of ealstic search API.
 * @member {String} authorizedToPurchase
 */
ProductSearchResponseCatalogInner.prototype['authorizedToPurchase'] = undefined;






export default ProductSearchResponseCatalogInner;

