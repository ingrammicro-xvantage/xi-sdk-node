/**
 * XI Sdk Resellers
 * For Ingram Micro Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReturnsCreateRequestListInnerShipFromInfoInner model module.
 * @module model/ReturnsCreateRequestListInnerShipFromInfoInner
 * @version 1.0.0
 */
class ReturnsCreateRequestListInnerShipFromInfoInner {
    /**
     * Constructs a new <code>ReturnsCreateRequestListInnerShipFromInfoInner</code>.
     * @alias module:model/ReturnsCreateRequestListInnerShipFromInfoInner
     * @param companyName {String} Name of the company from where the product will be shipped.
     * @param contact {String} Contact name of the person from where the product will be shipped.
     * @param addressLine1 {String} Ship from Address Line1.
     * @param city {String} Ship from City.
     * @param state {String} Ship from state.
     * @param postalCode {String} Ship from postal code.
     * @param countryCode {String} ship from country code.
     * @param email {String} Ship from email.
     */
    constructor(companyName, contact, addressLine1, city, state, postalCode, countryCode, email) { 
        
        ReturnsCreateRequestListInnerShipFromInfoInner.initialize(this, companyName, contact, addressLine1, city, state, postalCode, countryCode, email);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, companyName, contact, addressLine1, city, state, postalCode, countryCode, email) { 
        obj['companyName'] = companyName;
        obj['contact'] = contact;
        obj['addressLine1'] = addressLine1;
        obj['city'] = city;
        obj['state'] = state;
        obj['postalCode'] = postalCode;
        obj['countryCode'] = countryCode;
        obj['email'] = email;
    }

    /**
     * Constructs a <code>ReturnsCreateRequestListInnerShipFromInfoInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnsCreateRequestListInnerShipFromInfoInner} obj Optional instance to populate.
     * @return {module:model/ReturnsCreateRequestListInnerShipFromInfoInner} The populated <code>ReturnsCreateRequestListInnerShipFromInfoInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnsCreateRequestListInnerShipFromInfoInner();

            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], 'String');
            }
            if (data.hasOwnProperty('addressLine1')) {
                obj['addressLine1'] = ApiClient.convertToType(data['addressLine1'], 'String');
            }
            if (data.hasOwnProperty('addressLine2')) {
                obj['addressLine2'] = ApiClient.convertToType(data['addressLine2'], 'String');
            }
            if (data.hasOwnProperty('addressLine3')) {
                obj['addressLine3'] = ApiClient.convertToType(data['addressLine3'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnsCreateRequestListInnerShipFromInfoInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnsCreateRequestListInnerShipFromInfoInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReturnsCreateRequestListInnerShipFromInfoInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['contact'] && !(typeof data['contact'] === 'string' || data['contact'] instanceof String)) {
            throw new Error("Expected the field `contact` to be a primitive type in the JSON string but got " + data['contact']);
        }
        // ensure the json data is a string
        if (data['addressLine1'] && !(typeof data['addressLine1'] === 'string' || data['addressLine1'] instanceof String)) {
            throw new Error("Expected the field `addressLine1` to be a primitive type in the JSON string but got " + data['addressLine1']);
        }
        // ensure the json data is a string
        if (data['addressLine2'] && !(typeof data['addressLine2'] === 'string' || data['addressLine2'] instanceof String)) {
            throw new Error("Expected the field `addressLine2` to be a primitive type in the JSON string but got " + data['addressLine2']);
        }
        // ensure the json data is a string
        if (data['addressLine3'] && !(typeof data['addressLine3'] === 'string' || data['addressLine3'] instanceof String)) {
            throw new Error("Expected the field `addressLine3` to be a primitive type in the JSON string but got " + data['addressLine3']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }

        return true;
    }


}

ReturnsCreateRequestListInnerShipFromInfoInner.RequiredProperties = ["companyName", "contact", "addressLine1", "city", "state", "postalCode", "countryCode", "email"];

/**
 * Name of the company from where the product will be shipped.
 * @member {String} companyName
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['companyName'] = undefined;

/**
 * Contact name of the person from where the product will be shipped.
 * @member {String} contact
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['contact'] = undefined;

/**
 * Ship from Address Line1.
 * @member {String} addressLine1
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['addressLine1'] = undefined;

/**
 * Ship from Address Line2.
 * @member {String} addressLine2
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['addressLine2'] = undefined;

/**
 * Ship from Address Line3.
 * @member {String} addressLine3
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['addressLine3'] = undefined;

/**
 * Ship from City.
 * @member {String} city
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['city'] = undefined;

/**
 * Ship from state.
 * @member {String} state
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['state'] = undefined;

/**
 * Ship from postal code.
 * @member {String} postalCode
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['postalCode'] = undefined;

/**
 * ship from country code.
 * @member {String} countryCode
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['countryCode'] = undefined;

/**
 * Ship from email.
 * @member {String} email
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['email'] = undefined;

/**
 * Ship from phone number.
 * @member {String} phoneNumber
 */
ReturnsCreateRequestListInnerShipFromInfoInner.prototype['phoneNumber'] = undefined;






export default ReturnsCreateRequestListInnerShipFromInfoInner;

