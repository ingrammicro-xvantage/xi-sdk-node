/**
 * XI Sdk Resellers
 * For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderCreateV7RequestShipmentDetails model module.
 * @module model/OrderCreateV7RequestShipmentDetails
 * @version 1.0.0
 */
class OrderCreateV7RequestShipmentDetails {
    /**
     * Constructs a new <code>OrderCreateV7RequestShipmentDetails</code>.
     * Shipping details for the order provided by the customer.
     * @alias module:model/OrderCreateV7RequestShipmentDetails
     */
    constructor() { 
        
        OrderCreateV7RequestShipmentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderCreateV7RequestShipmentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderCreateV7RequestShipmentDetails} obj Optional instance to populate.
     * @return {module:model/OrderCreateV7RequestShipmentDetails} The populated <code>OrderCreateV7RequestShipmentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderCreateV7RequestShipmentDetails();

            if (data.hasOwnProperty('carrierCode')) {
                obj['carrierCode'] = ApiClient.convertToType(data['carrierCode'], 'String');
            }
            if (data.hasOwnProperty('requestedDeliveryDate')) {
                obj['requestedDeliveryDate'] = ApiClient.convertToType(data['requestedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('shipComplete')) {
                obj['shipComplete'] = ApiClient.convertToType(data['shipComplete'], 'String');
            }
            if (data.hasOwnProperty('shippingInstructions')) {
                obj['shippingInstructions'] = ApiClient.convertToType(data['shippingInstructions'], 'String');
            }
            if (data.hasOwnProperty('freightAccountNumber')) {
                obj['freightAccountNumber'] = ApiClient.convertToType(data['freightAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('signatureRequired')) {
                obj['signatureRequired'] = ApiClient.convertToType(data['signatureRequired'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderCreateV7RequestShipmentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderCreateV7RequestShipmentDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carrierCode'] && !(typeof data['carrierCode'] === 'string' || data['carrierCode'] instanceof String)) {
            throw new Error("Expected the field `carrierCode` to be a primitive type in the JSON string but got " + data['carrierCode']);
        }
        // ensure the json data is a string
        if (data['requestedDeliveryDate'] && !(typeof data['requestedDeliveryDate'] === 'string' || data['requestedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `requestedDeliveryDate` to be a primitive type in the JSON string but got " + data['requestedDeliveryDate']);
        }
        // ensure the json data is a string
        if (data['shipComplete'] && !(typeof data['shipComplete'] === 'string' || data['shipComplete'] instanceof String)) {
            throw new Error("Expected the field `shipComplete` to be a primitive type in the JSON string but got " + data['shipComplete']);
        }
        // ensure the json data is a string
        if (data['shippingInstructions'] && !(typeof data['shippingInstructions'] === 'string' || data['shippingInstructions'] instanceof String)) {
            throw new Error("Expected the field `shippingInstructions` to be a primitive type in the JSON string but got " + data['shippingInstructions']);
        }
        // ensure the json data is a string
        if (data['freightAccountNumber'] && !(typeof data['freightAccountNumber'] === 'string' || data['freightAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `freightAccountNumber` to be a primitive type in the JSON string but got " + data['freightAccountNumber']);
        }

        return true;
    }


}



/**
 * The code for the shipping carrier for the line item.
 * @member {String} carrierCode
 */
OrderCreateV7RequestShipmentDetails.prototype['carrierCode'] = undefined;

/**
 * The reseller-requested delivery date in UTC format. Delivery date is not guaranteed. Must be a future date.
 * @member {String} requestedDeliveryDate
 */
OrderCreateV7RequestShipmentDetails.prototype['requestedDeliveryDate'] = undefined;

/**
 * Specifies whether the shipment will be shipped only when all products are fulfilled. The value of this field along with acceptBackOrder field decides the value of backorderflag. If this field is set, acceptBackOrder field is ignored. Possible values for this field are true, C, P, E.With value as true or C, backorderflag will be set as C.With value as P, or E, backorderflag will be set as P or E respectively.C = Ship complete at distribution level.P = ship complete at line level.E = ship complete across all distributions.
 * @member {String} shipComplete
 */
OrderCreateV7RequestShipmentDetails.prototype['shipComplete'] = undefined;

/**
 * Any special shipping instructions for the order.
 * @member {String} shippingInstructions
 */
OrderCreateV7RequestShipmentDetails.prototype['shippingInstructions'] = undefined;

/**
 * The reseller 's shipping account number with carrier. Used to bill the shipping carrier directly from the reseller's account with the carrier.
 * @member {String} freightAccountNumber
 */
OrderCreateV7RequestShipmentDetails.prototype['freightAccountNumber'] = undefined;

/**
 * Specifies whether a signature is required for delivery. Default is False.
 * @member {Boolean} signatureRequired
 */
OrderCreateV7RequestShipmentDetails.prototype['signatureRequired'] = undefined;






export default OrderCreateV7RequestShipmentDetails;

