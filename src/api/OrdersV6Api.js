/**
 * XI SDK Resellers
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import OrderDetailResponse from '../model/OrderDetailResponse';

/**
* OrdersV6 service.
* @module api/OrdersV6Api
* @version 6.0
*/
export default class OrdersV6Api {

    /**
    * Constructs a new OrdersV6Api. 
    * @alias module:api/OrdersV6Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOrderdetailsV6 operation.
     * @callback module:api/OrdersV6Api~getOrderdetailsV6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order Details v6
     * Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \"simulateStatus\" query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
     * @param {String} ordernumber The Ingram Micro sales order number.
     * @param {String} iMCustomerNumber Your unique Ingram Micro customer number.
     * @param {String} iMCountryCode Two-character ISO country code.
     * @param {String} iMCorrelationID Unique transaction number to identify each transaction accross all the systems.
     * @param {Object} opts Optional parameters
     * @param {String} [iMSenderID] Unique value used to identify the sender of the transaction. Example: MyCompany.
     * @param {Date} [ingramOrderDate] The date and time in UTC format that the order was created.
     * @param {String} [vendorNumber] Vendor Number.
     * @param {module:model/String} [simulateStatus] Order response for various order statuses. Not for use in production.
     * @param {Boolean} [isIml] True/False only for IML customers.
     * @param {String} [regionCode] Region code for sandbox testing - Not for use in production.
     * @param {module:api/OrdersV6Api~getOrderdetailsV6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderDetailResponse}
     */
    getOrderdetailsV6(ordernumber, iMCustomerNumber, iMCountryCode, iMCorrelationID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ordernumber' is set
      if (ordernumber === undefined || ordernumber === null) {
        throw new Error("Missing the required parameter 'ordernumber' when calling getOrderdetailsV6");
      }
      // verify the required parameter 'iMCustomerNumber' is set
      if (iMCustomerNumber === undefined || iMCustomerNumber === null) {
        throw new Error("Missing the required parameter 'iMCustomerNumber' when calling getOrderdetailsV6");
      }
      // verify the required parameter 'iMCountryCode' is set
      if (iMCountryCode === undefined || iMCountryCode === null) {
        throw new Error("Missing the required parameter 'iMCountryCode' when calling getOrderdetailsV6");
      }
      // verify the required parameter 'iMCorrelationID' is set
      if (iMCorrelationID === undefined || iMCorrelationID === null) {
        throw new Error("Missing the required parameter 'iMCorrelationID' when calling getOrderdetailsV6");
      }

      let pathParams = {
        'ordernumber': ordernumber
      };
      let queryParams = {
        'ingramOrderDate': opts['ingramOrderDate'],
        'vendorNumber': opts['vendorNumber'],
        'simulateStatus': opts['simulateStatus'],
        'isIml': opts['isIml'],
        'regionCode': opts['regionCode']
      };
      let headerParams = {
        'IM-CustomerNumber': iMCustomerNumber,
        'IM-CountryCode': iMCountryCode,
        'IM-CorrelationID': iMCorrelationID,
        'IM-SenderID': opts['iMSenderID']
      };
      let formParams = {
      };

      let authNames = ['application'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderDetailResponse;
      return this.apiClient.callApi(
        '/resellers/v6/orders/{ordernumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
